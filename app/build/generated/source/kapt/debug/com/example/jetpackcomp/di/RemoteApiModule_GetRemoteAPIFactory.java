// Generated by Dagger (https://dagger.dev).
package com.example.jetpackcomp.di;

import com.example.jetpackcomp.data.Api;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RemoteApiModule_GetRemoteAPIFactory implements Factory<Api> {
  private final Provider<OkHttpClient> clientProvider;

  public RemoteApiModule_GetRemoteAPIFactory(Provider<OkHttpClient> clientProvider) {
    this.clientProvider = clientProvider;
  }

  @Override
  public Api get() {
    return getRemoteAPI(clientProvider.get());
  }

  public static RemoteApiModule_GetRemoteAPIFactory create(Provider<OkHttpClient> clientProvider) {
    return new RemoteApiModule_GetRemoteAPIFactory(clientProvider);
  }

  public static Api getRemoteAPI(OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(RemoteApiModule.INSTANCE.getRemoteAPI(client));
  }
}
